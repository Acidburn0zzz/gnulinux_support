#!/bin/busybox sh
#
# Copyright (c) 2016 Michael Serpieri <mickybart@pygoscelis.org>
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License version 2 as published by the
# Free Software Foundation.
#

####
# Prepare environment
export PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
/bin/busybox --install -s

LOG=/diagnosis.log
> $LOG

####
# Default profile
USB_IDVENDOR=0fce
USB_IDPRODUCT=7169
USB_IPRODUCT="Unknown"
USB_ISERIAL="Unknown"
USB_IMANUFACTURER="GNU/Linux Device"
USB_IFACE=""
TELNET_PORT=23
DATA_ROOTFS=/data/media/_gnulinux

####
# Override profile
if [ -f /init.profile ]; then
    source /init.profile
fi

####
# Constants
ANDROID_USB=/sys/class/android_usb/android0
USB_FUNCTIONS=rndis
LOCAL_IP=10.15.19.82

write() {
  echo -n "$2" > "$1"
}

usb_setup() {
    write $ANDROID_USB/enable        0
    write $ANDROID_USB/idVendor      $USB_IDVENDOR
    write $ANDROID_USB/idProduct     $USB_IDPRODUCT
    write $ANDROID_USB/iManufacturer "$USB_IMANUFACTURER"
    write $ANDROID_USB/iProduct      "$USB_IPRODUCT"
    write $ANDROID_USB/iSerial       "$USB_ISERIAL"
    write $ANDROID_USB/functions     $USB_FUNCTIONS
    write $ANDROID_USB/enable        1
}

usb_info() {
    write $ANDROID_USB/iSerial       "$1"
}

ip_setup() {
    if [ -n "$USB_IFACE" ]; then
        ifconfig $USB_IFACE $LOCAL_IP
        return
    fi
    
    ifconfig rndis0 $LOCAL_IP && USB_IFACE=rndis0
    if [ -z "$USB_IFACE" ]; then
        ifconfig usb0 $LOCAL_IP && USB_IFACE=usb0
    fi

    if [ -z "$USB_IFACE" ]; then
        usb_info "could not setup USB tethering!"
        umount_os
        return 1
    fi
}

# Minimal mounts for initrd or pre-init debug session
do_mount_devprocsys()
{
    mkdir /dev
    mount -t devtmpfs devtmpfs /dev
    mkdir /dev/pts
    mount -t devpts devpts /dev/pts

    mkdir /proc
    mkdir /sys
    mount -t sysfs sysfs /sys
    mount -t proc proc /proc
}

mount_os() {
    if [ -n "$DATA_DEVICE" ]; then
        mknod /dev/$DATA_DEVICE b $(grep $DATA_DEVICE /proc/partitions | awk '{print $1" "$2}') 2>> $LOG
        if [ -b "/dev/$DATA_DEVICE" ]; then
            mkdir /data
            mkdir /target

            mount /dev/$DATA_DEVICE /data
            mount --bind $DATA_ROOTFS /target
        else
            echo "Failed to create the node: mknod /dev/$DATA_DEVICE b $(grep $DATA_DEVICE /proc/partitions | awk '{print $1" "$2}')" >> $LOG
            return 1
        fi
    else
        echo "Device variable \$DATA_DEVICE not set!" >> $LOG
        return 1
    fi
}

umount_os() {
    umount /target
    umount /data
    [ -b "/dev/$DATA_DEVICE" ] && rm -f "/dev/$DATA_DEVICE"
}

run_debug_session() {
    [ -n "$NOTIFICATION_RED_LEDS" ] && \
    [ -f "$NOTIFICATION_RED_LEDS" ] && \
    write "$NOTIFICATION_RED_LEDS" 255
    
    usb_setup
    ip_setup
    
    if [ $? -eq 0 ]; then
        mkdir -p /etc
        cat << EOF > /etc/issue.net
Sorry to see you here but welcome !

Remark:
- Common error is about /data content not available:
  * device not found (/dev/$DATA_DEVICE) ? 
  * OS not available under ($DATA_ROOTFS) ?
- Issue with the kernel settings :
  * do: grep config.gz $LOG

Useful commands :
 - cat $LOG
 - grep config.gz $LOG
 - cat /proc/partitions
 - mount
 - cat /init.profile

Don't be sad, you will fix the problem for sure !
Once done, you will never see me again :'(
EOF

        telnetd -b ${LOCAL_IP}:${TELNET_PORT} -l /bin/sh
        usb_info "Debug: telnet ${LOCAL_IP}:${TELNET_PORT} (no dhcp)"
    fi
}

check_kernel_config() {
    if [ ! -e /proc/config.gz ]; then
        echo "No /proc/config.gz. Enable CONFIG_IKCONFIG and CONFIG_IKCONFIG_PROC" >> $LOG
    else
        # Must be =y
        for x in CONFIG_CGROUPS CONFIG_AUTOFS4_FS CONFIG_DEVTMPFS_MOUNT CONFIG_DEVTMPFS CONFIG_UNIX CONFIG_HOTPLUG CONFIG_INOTIFY_USER CONFIG_SYSVIPC CONFIG_NET CONFIG_PROC_FS CONFIG_SIGNALFD CONFIG_SYSFS CONFIG_TMPFS_POSIX_ACL CONFIG_VT; do
                zcat /proc/config.gz | grep -E "^$x=y\$" || echo "$x=y not found in /proc/config.gz" >> $LOG
        done
        # Must not be =y
        for x in CONFIG_ANDROID_LOW_MEMORY_KILLER CONFIG_ANDROID_PARANOID_NETWORK CONFIG_DUMMY CONFIG_SYSFS_DEPRECATED; do
                zcat /proc/config.gz | grep -E "^$x=y\$" && echo "$x=y found in /proc/config.gz, must be disabled" >> $LOG
        done
    fi
}

####
# Main

do_mount_devprocsys
check_kernel_config
mount_os
exec switch_root /target /sbin/init

####
# If something failed we will reach this code
# otherwise it will never be executed

run_debug_session
sleep 3600
