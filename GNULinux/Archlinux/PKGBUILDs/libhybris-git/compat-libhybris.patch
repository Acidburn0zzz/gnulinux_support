diff --git a/compat/Android.mk b/compat/Android.mk
new file mode 100644
index 0000000..de1f472
--- /dev/null
+++ b/compat/Android.mk
@@ -0,0 +1,3 @@
+hybris_compats := surface_flinger ui 
+
+include $(call all-named-subdir-makefiles,$(hybris_compats))
diff --git a/compat/camera/Android.mk b/compat/camera/Android.mk
index a1f1eac..b8a294e 100644
--- a/compat/camera/Android.mk
+++ b/compat/camera/Android.mk
@@ -1,15 +1,13 @@
 LOCAL_PATH:= $(call my-dir)
 include $(CLEAR_VARS)
 
-HYBRIS_PATH := $(LOCAL_PATH)/../../hybris
-
 LOCAL_SRC_FILES := camera_compatibility_layer.cpp
 
 LOCAL_MODULE := libcamera_compat_layer
 LOCAL_MODULE_TAGS := optional
 
 LOCAL_C_INCLUDES := \
-	$(HYBRIS_PATH)/include
+	$(LOCAL_PATH)/../include
 
 LOCAL_SHARED_LIBRARIES := \
 	libcutils \
@@ -24,15 +22,13 @@ include $(BUILD_SHARED_LIBRARY)
 
 include $(CLEAR_VARS)
 
-HYBRIS_PATH := $(LOCAL_PATH)/../../hybris
-
 LOCAL_SRC_FILES := direct_camera_test.cpp
 
 LOCAL_MODULE := direct_camera_test
 LOCAL_MODULE_TAGS := optional
 
 LOCAL_C_INCLUDES := \
-	$(HYBRIS_PATH)/include \
+	$(LOCAL_PATH)/../include \
 	bionic \
 	bionic/libstdc++/include \
 	external/gtest/include \
diff --git a/compat/include b/compat/include
new file mode 120000
index 0000000..4154d6f
--- /dev/null
+++ b/compat/include
@@ -0,0 +1 @@
+../hybris/include/
\ No newline at end of file
diff --git a/compat/input/Android.mk b/compat/input/Android.mk
index 1067ea8..34c550d 100644
--- a/compat/input/Android.mk
+++ b/compat/input/Android.mk
@@ -1,8 +1,6 @@
 LOCAL_PATH := $(call my-dir)
 include $(CLEAR_VARS)
 
-HYBRIS_PATH := $(LOCAL_PATH)/../../hybris
-
 LOCAL_CFLAGS += -std=gnu++0x
 
 LOCAL_SRC_FILES:= input_compatibility_layer.cpp
@@ -19,7 +17,7 @@ LOCAL_SHARED_LIBRARIES := \
 	libandroidfw
 
 LOCAL_C_INCLUDES := \
-	$(HYBRIS_PATH)/include \
+	$(LOCAL_PATH)/../include \
 	external/skia/include/core \
 	frameworks/base/services/input
 
@@ -27,8 +25,6 @@ include $(BUILD_SHARED_LIBRARY)
 
 include $(CLEAR_VARS)
 
-HYBRIS_PATH := $(LOCAL_PATH)/../../hybris
-
 LOCAL_CFLAGS += -std=gnu++0x
 
 LOCAL_SRC_FILES:= \
@@ -38,7 +34,7 @@ LOCAL_MODULE:= direct_input_test
 LOCAL_MODULE_TAGS := optional
 
 LOCAL_C_INCLUDES := \
-	$(HYBRIS_PATH)/include \
+	$(LOCAL_PATH)/../include \
 	bionic \
 	bionic/libstdc++/include \
 	external/gtest/include \
diff --git a/compat/surface_flinger/Android.mk b/compat/surface_flinger/Android.mk
index f3ced66..da36500 100644
--- a/compat/surface_flinger/Android.mk
+++ b/compat/surface_flinger/Android.mk
@@ -1,8 +1,6 @@
 LOCAL_PATH := $(call my-dir)
 include $(CLEAR_VARS)
 
-HYBRIS_PATH := $(LOCAL_PATH)/../../hybris
-
 LOCAL_SRC_FILES:= \
 	surface_flinger_compatibility_layer.cpp
 
@@ -10,7 +8,7 @@ LOCAL_MODULE:= libsf_compat_layer
 LOCAL_MODULE_TAGS := optional
 
 LOCAL_C_INCLUDES := \
-	$(HYBRIS_PATH)/include
+	$(LOCAL_PATH)/../include
 
 LOCAL_SHARED_LIBRARIES := \
 	libui \
@@ -23,8 +21,6 @@ include $(BUILD_SHARED_LIBRARY)
 
 include $(CLEAR_VARS)
 
-HYBRIS_PATH := $(LOCAL_PATH)/../../hybris
-
 LOCAL_SRC_FILES:= \
 	direct_sf_test.cpp
 
@@ -32,7 +28,7 @@ LOCAL_MODULE:= direct_sf_test
 LOCAL_MODULE_TAGS := optional
 
 LOCAL_C_INCLUDES := \
-	$(HYBRIS_PATH)/include
+	$(LOCAL_PATH)/../include
 
 LOCAL_SHARED_LIBRARIES := \
 	libui \
diff --git a/compat/surface_flinger/direct_sf_test.cpp b/compat/surface_flinger/direct_sf_test.cpp
index 0abfee5..61bca31 100644
--- a/compat/surface_flinger/direct_sf_test.cpp
+++ b/compat/surface_flinger/direct_sf_test.cpp
@@ -18,6 +18,7 @@
  */
 
 #include <hybris/surface_flinger/surface_flinger_compatibility_layer.h>
+#include <hardware/hwcomposer_defs.h>
 
 #include <cstdio>
 #include <unistd.h>
@@ -217,12 +218,20 @@ int main(int argc, char** argv)
 	setupGraphics();
 
 	printf("Turning off screen\n");
+#if __ANDROID_API__ < 21
 	sf_blank(0);
+#else
+	sf_set_power_mode(0, HWC_POWER_MODE_OFF);
+#endif
 
 	sleep(1);
 
 	printf("Turning on screen\n");
+#if __ANDROID_API__ < 21
 	sf_unblank(0);
+#else
+	sf_set_power_mode(0, HWC_POWER_MODE_NORMAL);
+#endif
 
 	for(;;) {
 		hw_render(disp, surface);
diff --git a/compat/surface_flinger/surface_flinger_compatibility_layer.cpp b/compat/surface_flinger/surface_flinger_compatibility_layer.cpp
index fa1c519..6bf34df 100644
--- a/compat/surface_flinger/surface_flinger_compatibility_layer.cpp
+++ b/compat/surface_flinger/surface_flinger_compatibility_layer.cpp
@@ -1,5 +1,6 @@
 /*
  * Copyright (C) 2013 Canonical Ltd
+ * Copyright (C) 2016 Michael Serpieri <mickybart@pygoscelis.org>
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -65,6 +66,7 @@ void report_surface_is_null_during_creation()
 }
 }
 
+#if __ANDROID_API__ < 21
 void sf_blank(size_t display_id)
 {
 	android::sp<android::IBinder> display;
@@ -100,6 +102,25 @@ void sf_unblank(size_t display_id)
 
 	android::SurfaceComposerClient::unblankDisplay(display);
 }
+#else
+void sf_set_power_mode(size_t display_id, int mode)
+{
+	android::sp<android::IBinder> display;
+
+	if (display_id == 0) {
+		display = android::SurfaceComposerClient::getBuiltInDisplay(
+				android::ISurfaceComposer::eDisplayIdMain);
+	} else if (display_id == 1) {
+		display = android::SurfaceComposerClient::getBuiltInDisplay(
+				android::ISurfaceComposer::eDisplayIdHdmi);
+	} else {
+		fprintf(stderr, "Warning: sf_set_power_mode invalid display_id (0 || 1)\n");
+		return;
+	}
+
+	android::SurfaceComposerClient::setDisplayPowerMode(display, mode);
+}
+#endif
 
 size_t sf_get_display_width(size_t display_id)
 {
@@ -141,6 +162,41 @@ size_t sf_get_display_height(size_t display_id)
 	return info.h;
 }
 
+size_t sf_get_display_info(size_t display_id, SfDisplayInfo* display_info)
+{
+	android::sp<android::IBinder> display;
+
+	if (display_id == 0) {
+		display = android::SurfaceComposerClient::getBuiltInDisplay(
+				android::ISurfaceComposer::eDisplayIdMain);
+	} else if (display_id == 1) {
+		display = android::SurfaceComposerClient::getBuiltInDisplay(
+				android::ISurfaceComposer::eDisplayIdHdmi);
+	} else {
+		fprintf(stderr, "Warning: sf_get_display_info invalid display_id (0 || 1)\n");
+		return -1;
+	}
+
+	android::DisplayInfo info;
+	android::SurfaceComposerClient::getDisplayInfo(display, &info);
+        
+        if (display_info == NULL) {
+            fprintf(stderr, "Warning: sf_get_display_info: display_info is null! Please allocate it before \n");
+            return -2;
+        }
+        
+        // partial copy
+        display_info->w = info.w;
+        display_info->h = info.h;
+        display_info->xdpi = info.xdpi;
+        display_info->ydpi = info.ydpi;
+        display_info->fps = info.fps;
+        display_info->density = info.density;
+        display_info->orientation = info.orientation;
+        
+	return 0;
+}
+
 SfClient* sf_client_create_full(bool egl_support)
 {
 	SfClient* client = new SfClient();
@@ -231,6 +287,19 @@ EGLConfig sf_client_get_egl_config(SfClient* client)
 	}
 }
 
+EGLContext sf_client_get_egl_context(SfClient* client)
+{
+	assert(client);
+
+	if (client->egl_support)
+		return client->egl_context;
+	else {
+		fprintf(stderr, "Warning: sf_client_get_egl_context not supported, EGL "
+				"support disabled\n");
+		return NULL;
+	}
+}
+
 void sf_client_begin_transaction(SfClient* client)
 {
 	assert(client);
@@ -353,3 +422,17 @@ void sf_surface_set_alpha(SfSurface* surface, float alpha)
 	assert(surface);
 	surface->surface_control->setAlpha(alpha);
 }
+
+/*
+void sf_surface_destroy()
+{
+}
+
+void sf_client_destroy()
+{    
+}
+
+void sf_destroy()
+{
+}
+*/
diff --git a/compat/ui/Android.mk b/compat/ui/Android.mk
index e1a45c1..58b26c4 100644
--- a/compat/ui/Android.mk
+++ b/compat/ui/Android.mk
@@ -1,8 +1,6 @@
 LOCAL_PATH:= $(call my-dir)
 include $(CLEAR_VARS)
 
-HYBRIS_PATH := $(LOCAL_PATH)/../../hybris
-
 LOCAL_SRC_FILES:= \
 	ui_compatibility_layer.cpp
 
@@ -10,7 +8,7 @@ LOCAL_MODULE:= libui_compat_layer
 LOCAL_MODULE_TAGS := optional
 
 LOCAL_C_INCLUDES := \
-	$(HYBRIS_PATH)/include \
+	$(LOCAL_PATH)/../include \
 	frameworks/native/include
 
 LOCAL_SHARED_LIBRARIES := \
diff --git a/compat/ui/ui_compatibility_layer.cpp b/compat/ui/ui_compatibility_layer.cpp
index 831cc30..90e9a64 100644
--- a/compat/ui/ui_compatibility_layer.cpp
+++ b/compat/ui/ui_compatibility_layer.cpp
@@ -126,6 +126,7 @@ void* graphic_buffer_get_native_buffer(struct graphic_buffer *buffer)
     return buffer->self->getNativeBuffer();
 }
 
+#if __ANDROID_API__ < 21
 void graphic_buffer_set_index(struct graphic_buffer *buffer, int index)
 {
     return buffer->self->setIndex(index);
@@ -135,6 +136,7 @@ int graphic_buffer_get_index(struct graphic_buffer *buffer)
 {
     return buffer->self->getIndex();
 }
+#endif
 
 int graphic_buffer_init_check(struct graphic_buffer *buffer)
 {
diff --git a/hybris/include/EGL/eglplatform.h b/hybris/include/EGL/eglplatform.h
index b8df075..740647c 100644
--- a/hybris/include/EGL/eglplatform.h
+++ b/hybris/include/EGL/eglplatform.h
@@ -47,8 +47,10 @@
  */
 
 #ifndef LIBHYBRIS_WANTS_MESA_X11_HEADERS
+#ifndef MESA_EGL_NO_X11_HEADERS
 #define MESA_EGL_NO_X11_HEADERS
 #endif
+#endif
 
 #ifndef EGLAPI
 #define EGLAPI KHRONOS_APICALL
diff --git a/hybris/include/hybris/internal/surface_flinger_compatibility_layer_internal.h b/hybris/include/hybris/internal/surface_flinger_compatibility_layer_internal.h
index c071778..f784ca8 100644
--- a/hybris/include/hybris/internal/surface_flinger_compatibility_layer_internal.h
+++ b/hybris/include/hybris/internal/surface_flinger_compatibility_layer_internal.h
@@ -25,6 +25,7 @@
 
 #include <utils/misc.h>
 
+#include <gui/Surface.h>
 #include <gui/SurfaceComposerClient.h>
 #include <ui/PixelFormat.h>
 #include <ui/Region.h>
diff --git a/hybris/include/hybris/surface_flinger/surface_flinger_compatibility_layer.h b/hybris/include/hybris/surface_flinger/surface_flinger_compatibility_layer.h
index 677f2eb..b7828ba 100644
--- a/hybris/include/hybris/surface_flinger/surface_flinger_compatibility_layer.h
+++ b/hybris/include/hybris/surface_flinger/surface_flinger_compatibility_layer.h
@@ -25,20 +25,49 @@ extern "C" {
 
 #include <EGL/egl.h>
 #include <EGL/eglext.h>
+#ifdef __ANDROID__
+#include <android/api-level.h>
+#else
+#include <android-config.h>
+#endif
 
 	struct SfClient;
 	struct SfSurface;
+        
+        /* see frameworks/native/include/ui/DisplayInfo.h */
+        struct SfDisplayInfo {
+            uint32_t w;
+            uint32_t h;
+            float xdpi;
+            float ydpi;
+            float fps;
+            float density;
+            uint8_t orientation;
+        };
+
+        /* Display orientations as defined in Surface.java and ISurfaceComposer.h. */
+        enum {
+            DISPLAY_ORIENTATION_0 = 0,
+            DISPLAY_ORIENTATION_90 = 1,
+            DISPLAY_ORIENTATION_180 = 2,
+            DISPLAY_ORIENTATION_270 = 3
+        };
 
 	enum
 	{
 		SURFACE_FLINGER_DEFAULT_DISPLAY_ID = 0
 	};
 
+#if (defined(__ANDROID__) && __ANDROID_API__ < 21) || (!defined(__ANDROID__) && ANDROID_VERSION_MAJOR < 5)
 	void sf_blank(size_t display_id);
 	void sf_unblank(size_t display_id);
+#else
+	void sf_set_power_mode(size_t display_id, int mode);
+#endif
 
 	size_t sf_get_display_width(size_t display_id);
 	size_t sf_get_display_height(size_t display_id);
+	size_t sf_get_display_info(size_t display_id, struct SfDisplayInfo* info);
 
 	// The egl_support parameter disables the use of EGL inside the
 	// library. sf_client_create() enables the use of EGL by default. When
@@ -51,6 +80,7 @@ extern "C" {
 
 	EGLDisplay sf_client_get_egl_display(struct SfClient* display);
 	EGLConfig sf_client_get_egl_config(struct SfClient* client);
+	EGLContext sf_client_get_egl_context(struct SfClient* client);
 	void sf_client_begin_transaction(struct SfClient*);
 	void sf_client_end_transaction(struct SfClient*);
 
diff --git a/hybris/include/hybris/ui/ui_compatibility_layer.h b/hybris/include/hybris/ui/ui_compatibility_layer.h
index af504c3..1b13284 100644
--- a/hybris/include/hybris/ui/ui_compatibility_layer.h
+++ b/hybris/include/hybris/ui/ui_compatibility_layer.h
@@ -20,6 +20,11 @@
 #include <stdbool.h>
 #include <stdint.h>
 #include <unistd.h>
+#ifdef __ANDROID__
+#include <android/api-level.h>
+#else
+#include <android-config.h>
+#endif
 
 #ifdef __cplusplus
 extern "C" {
@@ -50,8 +55,10 @@ extern "C" {
 
     void* graphic_buffer_get_native_buffer(struct graphic_buffer *buffer);
 
+#if (defined(__ANDROID__) && __ANDROID_API__ < 21) || (!defined(__ANDROID__) && ANDROID_VERSION_MAJOR < 5)
     void graphic_buffer_set_index(struct graphic_buffer *buffer, int index);
     int graphic_buffer_get_index(struct graphic_buffer *buffer);
+#endif
 
     int graphic_buffer_init_check(struct graphic_buffer *buffer);
 
diff --git a/hybris/sf/libsf.pc.in b/hybris/sf/libsf.pc.in
index 1d1652e..8f3a268 100644
--- a/hybris/sf/libsf.pc.in
+++ b/hybris/sf/libsf.pc.in
@@ -7,4 +7,4 @@ Name: hybris-surface-flinger
 Description: libhybris surface flinger library
 Version: @VERSION@
 Libs: -L${libdir} -lhybris-common -lsf
-Cflags: -I${includedir}
+Cflags: -I${includedir} -I${includedir}/hybris/surface_flinger
diff --git a/hybris/sf/sf.c b/hybris/sf/sf.c
index 5c55b93..4d7d72a 100644
--- a/hybris/sf/sf.c
+++ b/hybris/sf/sf.c
@@ -28,16 +28,23 @@
 
 HYBRIS_LIBRARY_INITIALIZE(sf, COMPAT_LIBRARY_PATH);
 
+#if (ANDROID_VERSION_MAJOR < 5)
 HYBRIS_IMPLEMENT_VOID_FUNCTION1(sf, sf_blank, size_t);
 HYBRIS_IMPLEMENT_VOID_FUNCTION1(sf, sf_unblank, size_t);
+#else
+HYBRIS_IMPLEMENT_VOID_FUNCTION2(sf, sf_set_power_mode, size_t, int);
+#endif
 HYBRIS_IMPLEMENT_FUNCTION1(sf, size_t, sf_get_display_width, size_t);
 HYBRIS_IMPLEMENT_FUNCTION1(sf, size_t, sf_get_display_height, size_t);
+HYBRIS_IMPLEMENT_FUNCTION2(sf, size_t, sf_get_display_info, size_t, struct SfDisplayInfo*);
 HYBRIS_IMPLEMENT_FUNCTION1(sf, struct SfClient*, sf_client_create_full, int);
 HYBRIS_IMPLEMENT_FUNCTION0(sf, struct SfClient*, sf_client_create);
 HYBRIS_IMPLEMENT_FUNCTION1(sf, EGLDisplay, sf_client_get_egl_display,
 	struct SfClient*);
 HYBRIS_IMPLEMENT_FUNCTION1(sf, EGLConfig, sf_client_get_egl_config,
 	struct SfClient*);
+HYBRIS_IMPLEMENT_FUNCTION1(sf, EGLContext, sf_client_get_egl_context,
+	struct SfClient*);
 HYBRIS_IMPLEMENT_VOID_FUNCTION1(sf, sf_client_begin_transaction,
 	struct SfClient*);
 HYBRIS_IMPLEMENT_VOID_FUNCTION1(sf, sf_client_end_transaction,
diff --git a/hybris/tests/test_sf.c b/hybris/tests/test_sf.c
index 01c5efa..15de1a2 100644
--- a/hybris/tests/test_sf.c
+++ b/hybris/tests/test_sf.c
@@ -27,6 +27,7 @@
 #include <GLES2/gl2ext.h>
 
 #include <hybris/surface_flinger/surface_flinger_compatibility_layer.h>
+#include <hardware/hwcomposer_defs.h>
 
 struct SfSurface* sf_surface_create(struct SfClient* client, SfSurfaceCreationParameters* params);
 EGLSurface sf_surface_get_egl_surface(struct SfSurface*);
@@ -237,13 +238,20 @@ int main(int argc, char** argv)
 	setupGraphics();
 
 	printf("Turning off screen\n");
+#if (ANDROID_VERSION_MAJOR < 5)
 	sf_blank(0);
+#else
+	sf_set_power_mode(0, HWC_POWER_MODE_OFF);
+#endif
 
 	sleep(1);
 
 	printf("Turning on screen\n");
+#if (ANDROID_VERSION_MAJOR < 5)
 	sf_unblank(0);
-
+#else
+	sf_set_power_mode(0, HWC_POWER_MODE_NORMAL);
+#endif
 	for (;;) {
 		hw_render(disp, surface);
 		hw_step();
diff --git a/hybris/tests/test_ui.c b/hybris/tests/test_ui.c
index 1847980..f2f85df 100644
--- a/hybris/tests/test_ui.c
+++ b/hybris/tests/test_ui.c
@@ -53,8 +53,10 @@ int main(int argc, char **argv)
 	graphic_buffer_lock(buffer, GRALLOC_USAGE_HW_RENDER, &vaddr);
 	graphic_buffer_unlock(buffer);
 
+#if (ANDROID_VERSION_MAJOR < 5)
 	graphic_buffer_set_index(buffer, 11);
 	assert(graphic_buffer_get_index(buffer) == 11);
+#endif
 
 	graphic_buffer_free(buffer);
 
diff --git a/hybris/ui/ui.c b/hybris/ui/ui.c
index 35d4024..3d4ca26 100644
--- a/hybris/ui/ui.c
+++ b/hybris/ui/ui.c
@@ -48,9 +48,11 @@ HYBRIS_IMPLEMENT_FUNCTION1(ui, uint32_t, graphic_buffer_unlock,
 	struct graphic_buffer*);
 HYBRIS_IMPLEMENT_FUNCTION1(ui, void*, graphic_buffer_get_native_buffer,
 	struct graphic_buffer*);
+#if (ANDROID_VERSION_MAJOR < 5)
 HYBRIS_IMPLEMENT_VOID_FUNCTION2(ui, graphic_buffer_set_index,
 	struct graphic_buffer*, int);
 HYBRIS_IMPLEMENT_FUNCTION1(ui, int, graphic_buffer_get_index,
 	struct graphic_buffer*);
+#endif
 HYBRIS_IMPLEMENT_FUNCTION1(ui, int, graphic_buffer_init_check,
 	struct graphic_buffer*);
diff --git a/utils/extract-headers.sh b/utils/extract-headers.sh
index 3cf374f..5c39a9e 100755
--- a/utils/extract-headers.sh
+++ b/utils/extract-headers.sh
@@ -291,6 +291,7 @@ install:
 	cp -r sync \$(DESTDIR)/\$(INCLUDEDIR)
 	cp -r libnfc-nxp \$(DESTDIR)/\$(INCLUDEDIR)
 	cp -r private \$(DESTDIR)/\$(INCLUDEDIR)
+	cp -r log \$(DESTDIR)/\$(INCLUDEDIR)
 EOF
 
 find "$HEADERPATH" -type f -exec chmod 0644 {} \;
